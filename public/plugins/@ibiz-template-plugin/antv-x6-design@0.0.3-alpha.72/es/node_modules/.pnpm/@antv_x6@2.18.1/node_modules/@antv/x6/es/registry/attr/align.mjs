import '../../../../../../../@antv_x6-common@2.0.16/node_modules/@antv/x6-common/es/index.mjs';
import '../../../../../../../@antv_x6-geometry@2.0.5/node_modules/@antv/x6-geometry/es/index.mjs';
import { Point } from '../../../../../../../@antv_x6-geometry@2.0.5/node_modules/@antv/x6-geometry/es/point.mjs';
import { isPercentage } from '../../../../../../../@antv_x6-common@2.0.16/node_modules/@antv/x6-common/es/number/number.mjs';

// `x-align` when set to `middle` causes centering of the subelement around its new x coordinate.
// `x-align` when set to `right` uses the x coordinate as referenced to the right of the bbox.
const xAlign = {
    offset: offsetWrapper('x', 'width', 'right'),
};
// `y-align` when set to `middle` causes centering of the subelement around its new y coordinate.
// `y-align` when set to `bottom` uses the y coordinate as referenced to the bottom of the bbox.
const yAlign = {
    offset: offsetWrapper('y', 'height', 'bottom'),
};
const resetOffset = {
    offset(val, { refBBox }) {
        return val ? { x: -refBBox.x, y: -refBBox.y } : { x: 0, y: 0 };
    },
};
function offsetWrapper(axis, dimension, corner) {
    return (value, { refBBox }) => {
        const point = new Point();
        let delta;
        if (value === 'middle') {
            delta = refBBox[dimension] / 2;
        }
        else if (value === corner) {
            delta = refBBox[dimension];
        }
        else if (typeof value === 'number' && Number.isFinite(value)) {
            delta = value > -1 && value < 1 ? -refBBox[dimension] * value : -value;
        }
        else if (isPercentage(value)) {
            delta = (refBBox[dimension] * parseFloat(value)) / 100;
        }
        else {
            delta = 0;
        }
        point[axis] = -(refBBox[axis] + delta);
        return point;
    };
}

export { resetOffset, xAlign, yAlign };
