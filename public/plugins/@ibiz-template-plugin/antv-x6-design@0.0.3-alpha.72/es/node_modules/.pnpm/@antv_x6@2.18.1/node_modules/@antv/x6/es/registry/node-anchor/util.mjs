import '../../../../../../../@antv_x6-common@2.0.16/node_modules/@antv/x6-common/es/index.mjs';
import '../../../../../../../@antv_x6-geometry@2.0.5/node_modules/@antv/x6-geometry/es/index.mjs';
import { Point } from '../../../../../../../@antv_x6-geometry@2.0.5/node_modules/@antv/x6-geometry/es/point.mjs';
import { isPercentage } from '../../../../../../../@antv_x6-common@2.0.16/node_modules/@antv/x6-common/es/number/number.mjs';

// eslint-disable-next-line
function resolve(fn) {
    return function (view, magnet, ref, options) {
        if (ref instanceof Element) {
            const refView = this.graph.findViewByElem(ref);
            let refPoint;
            if (refView) {
                if (refView.isEdgeElement(ref)) {
                    const distance = options.fixedAt != null ? options.fixedAt : '50%';
                    refPoint = getPointAtEdge(refView, distance);
                }
                else {
                    refPoint = refView.getBBoxOfElement(ref).getCenter();
                }
            }
            else {
                refPoint = new Point();
            }
            return fn.call(this, view, magnet, refPoint, options);
        }
        return fn.apply(this, arguments); // eslint-disable-line
    };
}
function getPointAtEdge(edgeView, value) {
    const isPercentage$1 = isPercentage(value);
    const num = typeof value === 'string' ? parseFloat(value) : value;
    if (isPercentage$1) {
        return edgeView.getPointAtRatio(num / 100);
    }
    return edgeView.getPointAtLength(num);
}

export { getPointAtEdge, resolve };
